<?php

/**
 * This is the model base class for the table "emp_appraisals".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EmpAppraisals".
 *
 * Columns in table "emp_appraisals" available as properties of the model,
 * followed by relations of table "emp_appraisals" available as properties of the model.
 *
 * @property integer $ID
 * @property integer $EmpID
 * @property integer $RaiseTypeID
 * @property string $FromSalary
 * @property string $ToSalary
 * @property string $NightDiff
 * @property string $ExtraAllowance
 * @property string $IncreaseTotal
 * @property string $DateEffective
 * @property string $Notes
 * @property integer $UpdateToPayroll
 * @property integer $ShowNotif
 * @property integer $PayrollSync
 * @property string $DateAdded
 * @property integer $AddedBy
 *
 * @property EmpRaisetype $raiseType
 * @property EmpInformation $emp
 * @property Employee $addedBy
 */
abstract class BaseEmpAppraisals extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'emp_appraisals';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Salary History|Salary History', $n);
	}

	public static function representingColumn() {
		return 'FromSalary';
	}

	public function rules() {
		return array(
			array('EmpID, ToSalary, DateEffective, UpdateToPayroll, RaiseTypeID', 'required'),
			array('EmpID, UpdateToPayroll', 'numerical', 'integerOnly'=>true),
			array('FromSalary, ToSalary', 'type', 'type'=>'float', 'message' => 'Incorrect value for {attribute}'),
			array('FromSalary, ToSalary', 'length', 'max'=>20),
			array('DateEffective, Notes, NightDiff, ExtraAllowance, IncreaseTotal', 'safe'),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('ID, EmpID, FromSalary, ToSalary, DateEffective, Notes, UpdateToPayroll, RaiseTypeID', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'raiseType' => array(self::BELONGS_TO, 'EmpRaisetype', 'RaiseTypeID'),
			'emp' => array(self::BELONGS_TO, 'EmpInformation', 'EmpID'),
			'addedBy' => array(self::BELONGS_TO, 'Employee', 'AddedBy'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'ID' => Yii::t('app', 'Record ID'),
			'EmpID' => Yii::t('app','Employee Name'),
			'RaiseTypeID' => Yii::t('app','Increase Type'),
			'NightDiff' => Yii::t('app', 'Night Diff'),
			'ExtraAllowance' => Yii::t('app', 'Extra Allowance'),
			'IncreaseTotal' => Yii::t('app', 'Total'),
			'FromSalary' => Yii::t('app', 'Current Salary'),
			'ToSalary' => Yii::t('app', 'Basic Salary'), /*new*/
			'DateEffective' => Yii::t('app', 'Effectivity Date'),
			'Notes' => Yii::t('app', 'Notes/Comments'),
			'UpdateToPayroll' => Yii::t('app', 'Sync To Payroll and Notify Payroll Master'),
			'ShowNotif' => Yii::t('app', 'Show Notif'),
			'PayrollSync' => Yii::t('app', 'Synced to Payroll?'),
			'DateAdded' => Yii::t('app', 'Date Added'),
			'AddedBy' => null,
			'emp' => null,
			'addedBy' => null,
			'raiseType' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('ID', $this->ID);
		$criteria->compare('EmpID', $this->EmpID);
		$criteria->compare('RaiseTypeID', $this->RaiseTypeID);
		$criteria->compare('FromSalary', $this->FromSalary, true);
		$criteria->compare('ToSalary', $this->ToSalary, true);
		$criteria->compare('NightDiff', $this->NightDiff, true);
		$criteria->compare('ExtraAllowance', $this->ExtraAllowance, true);
		$criteria->compare('IncreaseTotal', $this->IncreaseTotal, true);
		$criteria->compare('DateEffective', $this->DateEffective, true);
		$criteria->compare('Notes', $this->Notes, true);
		$criteria->compare('UpdateToPayroll', $this->UpdateToPayroll);
		$criteria->compare('ShowNotif', $this->ShowNotif);
		$criteria->compare('PayrollSync', $this->PayrollSync);
		$criteria->compare('DateAdded', $this->DateAdded, true);
		$criteria->compare('AddedBy', $this->AddedBy);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function searchPrint() {
		$criteria = new CDbCriteria;

		$criteria->compare('ID', $this->ID);
		$criteria->compare('EmpID', $this->EmpID);
		$criteria->compare('RaiseTypeID', $this->RaiseTypeID);
		$criteria->compare('DateEffective', $this->DateEffective, true);
		
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,			
			'pagination'=>false,
		));
	}
}